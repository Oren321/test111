-- Gui Source
local PrivateScript = loadstring(game:HttpGet("https://raw.githubusercontent.com/OrenSck/Src/refs/heads/main/Gui", true))()

-- Making The Window
local window = PrivateScript:Window({
    Title = "Pets Go | Private Script", 
    isMobile = false,
    Size = {
        X = 550,
        Y = 400
    },
    CustomTheme = {
        defaultTab = Color3.fromHex("#a49ae6"),
        background = Color3.fromRGB(40, 44, 50),
        secondaryBackground = Color3.fromRGB(49, 56, 66),
        tertiaryBackground = Color3.fromRGB(57, 63, 75),
        text = Color3.fromRGB(220,221,225),
        image = Color3.fromRGB(220,221,225),
        placeholder = Color3.fromRGB(165,166,169),
        close = Color3.fromRGB(190, 100, 105)
    },
    KeyCode = Enum.KeyCode.T
})

--AutoFarm Tab
local AutoFarm = window:Tab({
    Name = "AutoFarm",
    tabColor = Color3.fromRGB(180, 240, 67),
    Image = "rbxassetid://10709769841"
})

local isToggled = false

AutoFarm:Toggle({
   Name = "Auto Roll",
   Default = false,
   Callback = function(var)
       isToggled = var
       while isToggled do
           game:GetService("ReplicatedStorage").Network.Eggs_Roll:InvokeServer()
           task.wait()
       end
   end
})

--Clover Event Tab
local Clover = window:Tab({
    Name = "Clover Event",
    tabColor = Color3.fromRGB(180, 240, 67),
    Image = "rbxassetid://10709769841"
})

local isToggled = false

Clover:Toggle({
   Name = "Auto Open Pot Of Gold At Max",
   Default = false,
   Callback = function(var)
       isToggled = var
       if isToggled then
           spawn(function()
               while isToggled do
                   local TycoonCmds = require(game:GetService("ReplicatedStorage").Library.Client.TycoonCmds)
                   local Clover = require(game:GetService("ReplicatedStorage").Library.Directory.Tycoons).Clover
                   local CloverEventCmds = require(game:GetService("ReplicatedStorage").Library.Client.CloverEventCmds)

                   local MINE = TycoonCmds.Get(Clover)

                   if MINE then
                       local currentPoints = CloverEventCmds.GetEggPoints(MINE)
                       local maxPoints = CloverEventCmds.GetMaxEggPoints(MINE)

                       if currentPoints >= maxPoints then
                           game:GetService("ReplicatedStorage"):WaitForChild("Network")
                               :WaitForChild("Clovers_HatchEgg"):InvokeServer()
                       end
                   end
                   task.wait()
               end
           end)
       else
           isToggled = false
       end
   end
})

local isToggled = false

Clover:Toggle({
    Name = "Auto Collect Clovers",
    Default = false,
    Callback = function(var)
        isToggled = var
        if isToggled then
            task.spawn(function()
                local clovers = workspace.__THINGS.Clovers
 
                local function fireTouchInterest(part)
                    local playerChar = game.Players.LocalPlayer.Character
                    local primaryPart = playerChar and playerChar.PrimaryPart or part
                    firetouchinterest(part, primaryPart, 0)
                    firetouchinterest(part, primaryPart, 1)
                end
 
                while isToggled do
                    for _, model in pairs(clovers:GetChildren()) do
                        local part = model:FindFirstChild("Part")
                        if part then
                            fireTouchInterest(part)
                        end
                    end
                    task.wait()
                end
            end)
        else
            isToggled = false
        end
    end
 })

 local isToggled = false
 
 Clover:Toggle({
    Name = "Auto Collect Hoppers Loot",
    Default = false,
    Callback = function(var)
        isToggled = var
        if isToggled then
            task.spawn(function()
                while isToggled do
                    game:GetService("ReplicatedStorage"):WaitForChild("Network"):WaitForChild("Clovers_HopperClaim"):InvokeServer()
                    task.wait(5)
                end
            end)
        else
            isToggled = false
        end
    end
 })

 local isToggled = false

local patches = { "Patch_1", "Patch_2", "Patch_3", "Patch_4", "Patch_5", "Patch_6", "Patch_7", "Patch_8" }
local categories = { "", "_Farmer", "_Speed1", "_Speed2", "_Quality1", "_Quality2", "_Speed3", "_Quality3" }

Clover:Toggle({
    Name = "Auto Buy Clover Pads",
    Default = false,
    Callback = function(var)
        isToggled = var
        if isToggled then
            task.spawn(function()
                while isToggled do
                    for _, patch in ipairs(patches) do
                        for _, category in ipairs(categories) do
                            local args = {
                                [1] = patch .. category,
                                [2] = "Clover"
                            }
                            game:GetService("ReplicatedStorage"):WaitForChild("Network"):WaitForChild("Tycoons: Purchase"):InvokeServer(unpack(args))
                            task.wait()
                        end
                    end
                end
            end)
        else
            isToggled = false
        end
    end
 })

--Mini Games Tab
local MiniGames = window:Tab({
    Name = "Mini Games",
    tabColor = Color3.fromRGB(180, 240, 67),
    Image = "rbxassetid://10709769841"
})

MiniGames:Label("Fishing!")

local FishingSpots = {
    "Default",
    "Ice",
    "Kraken",
    "Corrupted",
}

MiniGames:Dropdown({
    Name = "Select Fishing Spot",
    Default = "Default",
    Items = FishingSpots,
    Multiselect = false,
    Callback = function(Value)
        selectedFishingSpot = Value
    end
})

local isToggled = false

MiniGames:Toggle({
    Name = "Auto Fish",
    Default = false,
    Callback = function(var)
        isToggled = var
        if isToggled then
            while isToggled do
                local args = {
                    [1] = selectedFishingSpot
                }
                game:GetService("ReplicatedStorage"):WaitForChild("Network"):WaitForChild("Fishing_Fish"):InvokeServer(unpack(args))
                game:GetService("ReplicatedStorage"):WaitForChild("Network"):WaitForChild("Fishing_Success"):FireServer()
                task.wait()
            end
        end
    end
})

local isToggled = false

MiniGames:Toggle({
    Name = "Claim Fishing Storage Loot",
    Default = false,
    Callback = function(var)
        isToggled = var
        while isToggled do
            game:GetService("ReplicatedStorage"):WaitForChild("Network"):WaitForChild("Fishing_FishermanClaim"):InvokeServer()
            task.wait(5)
        end
    end
})

MiniGames:Label("Mining!")

local MiningSpots = {
    "Dirt Ore",
    "Stone Ore",
    "Bronze Ore",
    "Iron Ore",
    "Gold Ore",
    "Emerald Ore",
    "Obsidian Ore",
    "Runic Ore",
    "Magma Ore",
}

MiniGames:Dropdown({
    Name = "Select Mining Spot",
    Default = "Default",
    Items = MiningSpots,
    Multiselect = false,
    Callback = function(Value)
        selectedMiningSpot = Value
    end
})

MiniGames:Toggle({
    Name = "Auto Mine",
    Default = false,
    Callback = function(var)
        isToggled = var
        if isToggled then
            while isToggled do
                local args = {
                    [1] = true
                }
                game:GetService("ReplicatedStorage"):WaitForChild("Network"):WaitForChild("Mining_SetState"):InvokeServer(unpack(args))
                
                local args = {
                    [1] = selectedMiningSpot
                }
                game:GetService("ReplicatedStorage"):WaitForChild("Network"):WaitForChild("Mining_Attack"):InvokeServer(unpack(args))
                task.wait()
            end
        end
    end
})
